Waterfall Model

Requirements Definition:

Requirements Engineering
1. Feasibility Study
Do we have the technology available to create the system? Yes, we do. What do we need? 
We need to have several classes, objects, methods, databases, and a user interface.
Is there a budget for this project? No, we need nothing but time to complete this project.
Conclusion is that the project is feasible.
2. Requirement Elicitation
This system is inspired from LeopardWeb and will behave similarily to it. 
Therfore the requirements to fufill will similar to LeopardWeb as in...
Students, Instructors, and Admins will be able to access similar modules but accomplish different things.
User interface is easy to understand and interact with.
3. Requirement Specification  //we should note that the program will also need a system in which users log in, so that they have access to their profile and thus correct methods/access -Chris
Student – can register, can see available courses and their own schedule.
Instructor – can see available courses and their own course roster.
Admin – can see everything, can edit courses/users/schedules.
4. Requirement Validation


|
|
|
V

System and Software Design:

Design
1. Architectural Design
This project will features classes, objects, many functions, databases, and a user interface.
2. Interface Design
Interactable modules that will bring users to different areas, such as courses, schedules, profile, etc.
3. Component Design
Classes: Student, Admin, Instructor (each has their own object)
Functions: (differ per class/object) see course, see schedule, see available courses
see course roster, edit course, edit user, edit schedule.
User Interface: Modules for similar functions.
4. Database Design  //I think database design can also pertain to the storage of available courses as well -Chris
First Name, Last Name, ID

|
|
|
V

Implementation and Unit Testing:

Implementation
1. Components
Make modules where users can interact with all the components of the system.
2. Database
Make sure that the databases are being used correctly and are accurate.
3. Interface
Create an interface that users can see and interact with.
Software Validation
1. Component/Unit Testing
Test all components/units.

|
|
|
V

Integration and System Testing:

Software Validation
2. System Testing
Test the entire system after integrating everything.
3. Acceptance Testing
Allow users to use the system as normal and aquire data from said users to fix anything.

|
|
|
V

Operation and Maitenance:

Maintenance
1. Bug Fixes and Further Testing
Fix any problems detected.
