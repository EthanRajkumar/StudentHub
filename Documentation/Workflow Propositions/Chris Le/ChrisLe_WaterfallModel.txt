Requirements Definition
-project is feasible, all resources (IDE, repository, libraries, etc.) should be free/pre-acquired
-analyze and note functionalities/features of LeopardWeb that should be implemented
-all users should have name + ID
-students can search/register/unregister for available courses and print/view their own courses
-instructors can search available courses and print/view their course list and schedule
-admins can add/remove courses in system, view a user's course list/schedule, view/add/remove users (from system/a course's roster), and search/print courses + course rosters
-printing/viewing courses should include course name/course number/time/location/instructor
-printing/viewing of users should include all attributes (first + last names, ID) and the type of user (student/instructor/admin)

System and Software Design
-parent class User: attributes first+last name, ID; set methods for each attribute; print method to display all user info (attributes)
-child class Student: inherit User attributes/methods; methods to implement aforementioned functionalities, store courses (array attribute?), method to sort through/organize registered courses into chronological schedule
-child class Instructor: inherit User attributes/methods; methods to implement aforementioned functionalities, store instructing courses (array attribute?), method to sort through/organize registered courses into chronological schedule
-child class Admin: inherit User attributes/methods; methods to implement aforementioned functionalities
-class Course: attributes of day/time/instructor?
-store all available courses in system => database?

Implementation and Unit Testing
-code in C++ (or Java)
//We should try to observe what other systems are using to decide what language we should use. Even Python isn't off the table. -Matthew
-collaboration via GitHub repository
-test case(s): create object(s) of each class and run all possible methods in main method for functionality

Integration and System Testing
-interface program into user-friendly GUI
-imitate test case(s) through use of GUI

